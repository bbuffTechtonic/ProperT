{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\n/* eslint-disable no-console, no-param-reassign */\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' // [::1] is the IPv6 localhost address.\n|| window.location.hostname === '[::1]' // 127.0.0.1/8 is considered localhost for IPv4.\n|| window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/billbuff/projects/academy/capstone/ProperT-react/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","response","status","headers","get","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","origin","addEventListener"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\n/* eslint-disable no-console, no-param-reassign */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}